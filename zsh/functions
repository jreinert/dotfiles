#!/usr/bin/zsh

_() {
	sudo "$@"
}

dmenu () {
  command dmenu -fn $THEME_FONT -nf $THEME_FG -nb $THEME_BG -sf $THEME_BLUE -sb $THEME_SEL_DARK "$@"
}

lspath () {
  (($#)) || set ''
  local names; names=($^path/*$^@*(N:t))
  print -lr -- ${(ou)names}
}

setscreen () {
  "$HOME/.screenlayout/$@.sh"
  systemctl --user reload wm
  systemctl --user restart conky trayer
}

screenlayouts () {
  ls $HOME/.screenlayout | sed 's/\.sh$//'
}

resource () {
  source "$HOME/.zshrc"
}

wget () {
  command wget --content-disposition "$@"
}

rbt () {
  sudo kexec -l /boot/vmlinuz-linux --initrd=/boot/initramfs-linux.img \
    --reuse-cmdline && sudo systemctl kexec
}

scratch () {
  vim -c ":set ft=$1" $(mktemp)
}

udmount () {
  udisksctl mount -b "$@"
}

meteor-deploy () {
  local name
  if [[ "$@" == "" ]]; then
    name=$(basename $(pwd))
  else
    name="$@"
  fi
  meteor build --directory "/tmp/$name" || exit $?
  local deploy_dir="/usr/share/webapps/$name"
  echo -n "Deploying to $deploy_dir in 3.."
  sleep 1 && echo -n " 2.." && sleep 1 && echo " 1.." && sleep 1 || exit 1
  rsync --delete -raP --chown http:http --protect-args \
    "/tmp/$name/" "root@server:$deploy_dir/" && \
  ssh root@server "cd \"$deploy_dir/bundle/programs/server\" && sudo -u http npm install --python=python2 && systemctl restart $name" && \
  rm -rf "/tmp/$name"
}

ncmpcpp () {
  systemctl --user start mpdas
  command ncmpcpp --config $XDG_CONFIG_HOME/ncmpcpp/config "$@"
}

udumount () {
  local realpath=$(readlink -e "$@")
  local blockdevice=$(mount | grep "$realpath" | awk '{print $1}')
  udisksctl unmount -b "$blockdevice"
}

alot () {
	command alot $@ && notmuch tag -unseen -- tag:unseen
}

kill_and_wait() {
	local try=0
	while pid=$(pidof $1) && [ $try -lt 10 ]; do
		kill $pid
		try+=1
	done
	if [[ ! -z "$pid" ]]; then
		kill -9 $pid
	fi
}

be() {
	local dir=$(/usr/bin/pwd)
	local is_bundle=false
	while [ "$dir" != '/' ] && ! $is_bundle; do
		if [ -f "$dir/Gemfile" ]; then
			is_bundle=true
		else
			dir=$(dirname $dir)
		fi
	done
	local cmd=$1
	shift
	if $is_bundle; then
		echo "Found Gemfile, starting with bundle exec" >&2
		bundle exec $cmd "$@"
	else
		command $cmd "$@"
	fi
}

be_commands=(
	rails cap rake rackup puma thin unicorn pry rspec guard rubocop yard shotgun
	ruby-prof hanami middleman
)

for cmd in "${be_commands[@]}"; do
	$cmd() {
		be $0 "$@"
	}
done

term() {
	hc spawn termite -d $PWD
}

tmux() {
	command tmux -f ~/.config/tmux/tmux.conf "$@"
}

cdmk () {
	mkdir -p $1
	cd $1
}

p() {
	local pres_theme="$XDG_CONFIG_HOME/base16-shell/base16-bright.light.sh"
	local default_theme="$XDG_CONFIG_HOME/base16-shell/base16-default.dark.sh"

	if [[ "$BASE16_SHELL" = "$default_theme" ]]; then
		BASE16_SHELL="$pres_theme"
		ln -sf "$XDG_CONFIG_HOME/termite/"{presi,config}
	else
		BASE16_SHELL="$default_theme"
		ln -sf "$XDG_CONFIG_HOME/termite/"{default,config}
	fi

	source "$BASE16_SHELL"
	kill -SIGUSR1 $(xdotool getactivewindow getwindowpid)
}

zdf() {
	mpv $(curl -s 'http://zdf1314-lh.akamaihd.net/i/de14_v1@392878/master.m3u8?dw=0' | grep index_3096 | head -1)
}

djvuedit() {
	local file="$1"
	local tempfile=$(mktemp /tmp/djvuedit.XXXX)
	djvused -u -e print-meta "$file" | vipe > "$tempfile"
	djvused -u -s -e "set-meta \"$tempfile\"" "$file"
	rm "$tempfile"
}

filer() {
	vim +"VimFiler $@"
}

down() {
	echo 'Insert torrent links:'
	while read link; do
		transmission-remote -a "$link"
	done
}

mux() {
	tmuxinator "$@"
}

tsessions() {
	tmux list-sessions -F '#{session_name} #{?session_attached,,not_attached}' | \
		awk '/not_attached/{print $1}'
}

tkill() {
	tsessions | fzf | xargs tmux kill-session -t
}

tswitch() {
	tsessions | fzf | xargs tmux switch-client -t
}

tnew() {
	tmux new -d -s "$@"
	tmux switch-client -t $1
}

ls() {
	command ls --color=auto "$@"
}

grep() {
	command grep --color=auto "$@"
}

asciirec() {
	local tempfile=$(mktemp /tmp/asciirec.XXXXX.asciinema.json)
	asciinema rec "$tempfile"
	fb "$tempfile"
	rm "$tempfile"
}

compdef _tmuxinator mux

ipfs-paste() {
	local gateway_url='https://ipfs.jokke.space'
	local ipfs_path=$(ipfs add "$@" | tail -n1 | awk '{print $2}')
	local url="$gateway_url/hl/#?path=$ipfs_path&lang="
	echo "$url" | xclip -i
	echo "$url"

	if [[ "$@" =~ --pin($| |=true) ]]; then
		ssh root@jokke.space sudo -u ipfs ipfs pin add "$ipfs_path"
	fi
}

http-debug() {
	local port=$@
	local server_port=$((port + 1))
	echo "require \"http/server\"; HTTP::Server.new($(server)) {}.listen" | crystal eval &
	local server_pid=$!
	mitmproxy -p 
	kill $server_pid
}

imgur(){
	$*|convert label:@- png:-| \
	curl -F "image=@-" -F "key=1913b4ac473c692372d108209958fd15" https://api.imgur.com/2/upload.xml #| \
	#grep -Eo "<original>(.)*</original>" |\
	#grep -Eo "http://i.imgur.com/[^<]*"
}

fbs() {
	local url=$1
	local time=${2-5}

	fb <<-HTML | rev | cut -c 2- | rev | xclip
	<html>
	<head>
		<meta http-equiv="refresh" content="${time}; url=${url}" />
	</head>
	<body>
		<h3>Redirect</h3>
		<p>Redirecting you to <a href="${url}">${url}</a></p>
	</body>
	</html>
	HTML

	xclip -o
}

qrshow() {
	local url=$1
	[[ -z "$url" ]] && read url
	qrencode -o - "$url" | feh -
}
